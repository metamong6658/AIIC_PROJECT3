module allocator #(
    parameter data_size = 8,
    parameter mask_cnt_init = 1,
    parameter mask_cnt_delay = 1   
)(
    input [4:0] empty,
    input [4:0] request,
    output reg [4:0] fill,
    output reg [4:0] grant,
    input [data_size-1:0] l_data_i,
    input [data_size-1:0] n_data_i,
    input [data_size-1:0] e_data_i,
    input [data_size-1:0] s_data_i,
    input [data_size-1:0] w_data_i,
    output reg [data_size-1:0] sel_data     
);
wire [4:0] d_request;
// select data
reg [4:0] mask [0:4];
reg [2:0] mask_cnt;
reg [4:0] mask_dat;

initial begin
    mask[0] = 5'b10000;
    mask[1] = 5'b01000;
    mask[2] = 5'b00100;
    mask[3] = 5'b00010;
    mask[4] = 5'b00001;
end

initial begin
    mask_cnt = mask_cnt_init;
end

initial begin
    grant = 0;
    fill = 0;
    sel_data = 0;
end

always @(*) begin
    if(mask_cnt == 4) begin
        mask_cnt <= #(mask_cnt_delay) 3'b001;
    end
    else begin
        mask_cnt <= #(mask_cnt_delay) mask_cnt + 1'b1;
    end
end

always @(*) begin
    mask_dat = mask[mask_cnt];
end

buf #3 (d_request,request);

always @(d_request) begin
    grant = mask_dat & d_request;
end

always @(l_data_i or n_data_i or e_data_i or s_data_i or w_data_i) begin // step 2
    if(grant[4]) begin
        sel_data <= l_data_i;
        grant[4] <= 1'b0;
    end
    else if(grant[3]) begin
        sel_data <= n_data_i;
        grant[3] <= 1'b0;
    end
    else if(grant[2]) begin
        sel_data <= e_data_i;
        grant[2] <= 1'b0;
    end
    else if(grant[1]) begin
        sel_data <= s_data_i;
        grant[1] <= 1'b0;
    end
    else if(grant[0]) begin
        sel_data <= w_data_i;
        grant[0] <= 1'b0;
    end
    else begin
        sel_data <= sel_data;
    end
end

always @(sel_data) begin // step 3
    fill = mask[mask_cnt] & empty;
end

endmodule